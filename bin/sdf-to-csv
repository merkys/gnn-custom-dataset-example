#!/usr/bin/perl

use strict;
use warnings;

use Chemistry::Mol;
use Chemistry::File::SDF;
use File::Basename qw( basename );

my $program = basename $0;

@ARGV = ( '-' ) unless @ARGV;

Chemistry::Mol->register_format( sdf => Chemistry::File::SDF:: );

$\ = "\n";
$, = ',';

sub id_to_number($);

foreach my $filename (@ARGV) {
    local $SIG{__WARN__} = sub {
        print STDERR "$program: $filename: $_[0]"
    };

    eval {
        my $reader = Chemistry::Mol->file( $filename, format => 'sdf' );
        $reader->open( '<' );
        Chemistry::Atom::reset_id();
        my $molecule = $reader->read_mol( $reader->fh );
        my $dir = 'input_graph_CSV_files/data/' . basename( $filename, '.sdf' );
        `mkdir --parents $dir`;
        open( my $EDGES, '>', $dir . '/' . basename( $filename, '.sdf' ) . '_edges.csv' );
        open( my $VERTICES_IN, '>', $dir . '/' . basename( $filename, '.sdf' ) . '_vertices_in.csv' );
        open( my $VERTICES_OUT, '>', $dir . '/' . basename( $filename, '.sdf' ) . '_vertices_out.csv' );

        print $EDGES 'from', 'to', 'length';
        print $VERTICES_IN 'id', 'mass';
        print $VERTICES_OUT 'id', 'bond_order_sum';

        # Print out the vertices
        for my $atom ($molecule->atoms) {
            print $VERTICES_IN id_to_number $atom->id, $atom->mass;
            my $bond_order_sum = 0;
            for my $bond ($atom->bonds) {
                $bond_order_sum += $bond->order;
            }
            print $VERTICES_OUT id_to_number $atom->id, $bond_order_sum;
            print $EDGES id_to_number $atom->id, id_to_number $atom->id, 0;
        }

        for my $bond ($molecule->bonds) {
            my @atoms = map { id_to_number $_ } $bond->atoms;
            # Edges must go to both directions
            print $EDGES @atoms, $bond->length;
            print $EDGES reverse( @atoms ), $bond->length;
        }

        close $EDGES;
        close $VERTICES_IN;
        close $VERTICES_OUT;
    };
    if( $@ ) {
        $@ =~ s/\n$//;
        print STDERR "$program: $filename: $@\n";
    }

}

sub id_to_number($)
{
    my( $id ) = @_;
    $id =~ s/^a//;
    $id--;
    return $id;
}
